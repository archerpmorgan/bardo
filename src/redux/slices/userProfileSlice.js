import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from "axios";

const initialState = {
    photo: "",
    userId: "",
    email: "",
    defaultBookendOpenText: "",
    defaultBookendCloseText: "",
    phoneContacts: {
    },
    activities: [],
    recordedMessages: [],
    internetContent: [] //meditation videos, prayers, etc.
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUserProfileAsync = createAsyncThunk(
  'userProfile/fetchFromCloudStorage',
  async (userId) => {
    const gerUserProfile = async (event) => {
      console.log("Trying to get profile for user: " + userId);
      event.preventDefault();
      const response = axios
        .get("https://localhost:3001/userProfile", {
          "userId": userId,
        })
        .then((res) => {
          console.log(res);
          // persist profile
        }).catch((err) => {
          console.log(err)
        });
        return response.data;
    }
    const response = await getUserProfile();
    return response;
  }
);

// The createSlice toolkit is a way of expressing the actions, action creators, and reducers all at once in the same place
// purely exists to reduce tedium

// note: there is state mutating logic in these reducers, which is only made possible by the abstraction created by the toolkit
export const userProfileSlice = createSlice({
  name: 'userProfile',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // action: {type = userProfile/updateName}
    setUserProfile: (state, action) => {
      state = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserProfileAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getUserProfileAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      });
  },
});

export const { setUserProfile } = userProfileSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUserProfile = (state) => state.userProfile;

export default userProfileSlice.reducer;
