import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from "axios";

const initialState = {
  isLoading: false,
  isFetchComplete: false, // inspect to see if we need to fetch or have already done so
  isFetchError: false,
  profile: {
    photo: "",
    userId: "",
    username: "",
    defaultBookendOpenText: "",
    defaultBookendCloseText: "",
    phoneContacts: {
    },
    activities: [],
    recordedMessages: [],
    internetContent: [] //meditation videos, prayers, etc.
  }
};

export const getUserProfileAsync = createAsyncThunk(
  'userProfile/getUserProfileAsync',
  async (userId) => {
    let data = null;
    console.log('thunk running to fetch profile')
    await axios
      .get("http://localhost:3000/data/profile", {
        params: {
          "userId": userId,
        }
      })
      .then((res) => {
        data = res.data
        console.log(res);
      }).catch((err) => {
        console.log(err)
      });
    return data;
  }
);


// note: there is state mutating logic in these reducers, which is only made possible by the abstraction created by the toolkit
export const userProfileSlice = createSlice({
  name: 'userProfile',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserProfileAsync.pending, (state) => {
        state.isLoading = true
        state.isFetchComplete = false;
      })
      .addCase(getUserProfileAsync.fulfilled, (state, action) => {
        state.isLoading = false;
        state.isFetchComplete = true;
        state.profile = action.payload;
      })
      .addCase(getUserProfileAsync.rejected, (state, action) => {
        state.isLoading = false
        state.isFetchComplete = false;
        state.isFetchError = true;
        console.log(action.error.message);
      });
  },
});

export const { setUserProfile } = userProfileSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUserProfile = (state) => state.userProfile.profile;
export const selectLoadingStatus = (state) => state.userProfile.isLoading;
export const selectFetchComplete = (state) => state.userProfile.isFetchComplete;
export default userProfileSlice.reducer;
